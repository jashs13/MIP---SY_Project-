gamifyit.py CODE

from tkinter import *
from tkinter.messagebox import *
import psycopg2
from memory import *  

 

def adjustWindow(window):
    w = 600 
    h = 600 
    ws = screen.winfo_screenwidth() 
    hs = screen.winfo_screenheight() 
    x = (ws/2) - (w/2) 
    y = (hs/2) - (h/2)
    window.geometry('%dx%d+%d+%d' % (w, h, x, y)) 
    window.resizable(True, True) 

def update_user_in_db():
    connection = None
    try:
        connection = psycopg2.connect(user = "postgres",
        password = "1314", host = "127.0.0.1", port = "5432", 
        database = "Mini Project")
        print("Connected to PostgreSQL.")
        cursor = connection.cursor()
        sql = "insert into Gamifyit_users(username,password) values('%s','%s')"
        user_name = nEntry.get()
        password = pwEntry.get()
        args = (user_name, password)
        cursor.execute(sql % args)
        connection.commit()    
        print("The query is executed and 1 new row inserted.")
        showinfo("Congrats!", "You have registered successfully. Now login again to enjoy!")
    except (Exception, psycopg2.DatabaseError) as e:
        connection.rollback()
        print("issue  ", e)	
    finally:
        if connection is not None:
            cursor.close()
            connection.close()
            print("PostgreSQL connection is closed.")

def password_check(password):
	x = password
	if  (len(x)>8) and (len(x)<15) and any(
	char.isdigit() for char in x) and any(
	char.isalpha() for char in x) and any(
	char.isalnum() for char in x) and any(
	char.isupper() for char in x) and any(
	char.islower() for char in x):
		return True
	else:
		return False

# Validating for each input 
def validate(event, input):
    if (input == "Name"):
        if all(x.isalpha() or x.isspace() for x in name.get()) and (len(name.get()) > 1): 
            pwEntry.focus_set() 
            pwEntry.config(state='normal') 
        else: 
            showwarning("Invalidate!" ,"Name cannot contain digits or special characters. Spaces are allowed and length should be greater than 1.") 
            nEntry.focus_set()  
    elif (input == "Password"):
        password = pw.get()
        if password_check(password):
            showinfo("Validated!", "The user can click on save to complete the registeration process")
        else:
            showwarning("Invalid!", "The pw length should be 8-15. It should have atleast a digit, an alphabet, a lowercase letter, an uppercase letter and a special character.")    


def f2():
    gaop.withdraw()
    screen.deiconify()

def callMemory():
    if __name__ == '__main__':
        main()

def callDino():
    from Dino_runGame import main
    


def game_option():
    global gaop
    gaop = Toplevel(screen)
    adjustWindow(gaop)
    screen.withdraw()
    gaop.title("Games")
    
    frame = Frame(gaop, bg='#80c1ff', bd=5)
    frame.place(relx=0.1, rely=0.1, relwidth=0.8, relheight=0.8)

    # 2 Game option buttons
    btnmemory = Button(frame, bg='#174873', font=30, bd=10, text="Memory Game", fg='white',command=callMemory)
    btnmemory.place(relx=0.25, rely=0.1, relwidth=0.45, relheight=0.2)

    btnDino = Button(frame, bg='#174873', font=30, bd=10, text="Dino - Run Game", fg='white',command=callDino)
    btnDino.place(relx=0.25, rely=0.4, relwidth=0.45, relheight=0.2)

    # Lower Frame
    lower_frame = Frame(gaop, bg='#00bfff', bd=5)
    lower_frame.place(relx=0.1, rely=0.7, relwidth=0.8, relheight=0.2)
    
    btnback = Button(lower_frame, text='Back', font='20', bd=5, command=f2)
    btnback.place(relx=0.33, rely=0.18, relwidth=0.35, relheight=0.5)

    gaop.mainloop()


def f1():
    regusr.withdraw()
    screen.deiconify()

def register_user():
    global regusr, name, pw
    global nEntry, pwEntry
    regusr = Toplevel(screen)
    adjustWindow(regusr)
    screen.withdraw()
    regusr.title("Add User")
    
    frame = Frame(regusr, bg='#80c1ff', bd=5)
    frame.place(relx=0.1, rely=0.1, relwidth=0.8, relheight=0.8)

    # Labels
    lblentname = Label(frame, text='Enter Name', font=20)
    lblentname.place(relx=0.35, rely=0.01, relwidth=0.3, relheight=0.1)

    lblentpw = Label(frame, text='Enter Password', font=20)
    lblentpw.place(relx=0.35, rely=0.25, relwidth=0.3, relheight=0.1)

    # Entry
    name = StringVar()
    pw = StringVar()  

    nEntry = Entry(frame, font=20, textvariable=name)
    nEntry.place(relx=0.15, rely=0.14, relwidth=0.7, relheight=0.08)
    nEntry.bind("<Return>", lambda event: validate(event, "Name")) 
    nEntry.bind("<Tab>", lambda event: validate(event, "Name")) 

    pwEntry = Entry(frame, font=20, textvariable=pw)
    pwEntry.place(relx=0.15, rely=0.37, relwidth=0.7, relheight=0.08)
    pwEntry.bind("<Return>", lambda event: validate(event, "Password")) 
    pwEntry.bind("<Tab>", lambda event: validate(event, "Password")) 
 
    # First is enabled rest 2 inputs will be disabled for checking validation 
    pwEntry.config(state='disabled')
    
    # Lower Frame
    lower_frame = Frame(regusr, bg='#00bfff', bd=5)
    lower_frame.place(relx=0.1, rely=0.7, relwidth=0.8, relheight=0.2)
    
    btnback = Button(lower_frame, text='Back', font='20', bd=5, command=f1)
    btnback.place(relx=0.12, rely=0.15, relwidth=0.2, relheight=0.5)

    btnsave = Button(lower_frame, text='Save', font='20', bd=5, command=update_user_in_db)
    btnsave.place(relx=0.65, rely=0.15, relwidth=0.2, relheight=0.5)

    regusr.mainloop()



def login_verify():
    connection = None
    try:
        connection = psycopg2.connect(user = "postgres",
        password = "1314", host = "127.0.0.1", port = "5432", 
        database = "Mini Project")
        print("Connected to PostgreSQL.")
        cursor = connection.cursor()
        sql = "select * from Gamifyit_users"
        cursor.execute(sql)
        data = cursor.fetchall()  # list of tuples of row
        # [('username','pw'),('','')]
        connection.commit()
        for d in data:
            if ((username_verify.get() == d[0]) and (password_verify.get() == d[1])):
                print("The username and password matches.")
                print("Therefore, the row exists.") 	
                showinfo("Welcome!","Login successful...") 
                btnlogin.configure(state=NORMAL)
            else:
                print("Username and pw not found")
                showerror("Error!","User not found. Please register!")    		     
        print("The query is executed and the credentials are checked.")
        
    except (Exception, psycopg2.DatabaseError) as e:
        connection.rollback()
        print("issue  ", e)	
    finally:
        if connection is not None:
            cursor.close()
            connection.close()
            print("PostgreSQL connection is closed.")


# login window
def main_screen():
    global screen, username_verify, password_verify, btnlogin
    screen = Tk() # initializing the tkinter window
    username_verify = StringVar()
    password_verify = StringVar()
    screen.title("LOGIN TO PLAY") # mentioning title of the window
    adjustWindow(screen) # configuring the window
    Label(screen, text="GamifyIt", width="500", height="2", font=("Calibri", 22, 'bold'), fg='white', bg='#d9660a').pack()
    Label(text="", bg='white').pack() # for leaving a space in between
    Label(screen, text="", bg='#174873',width='73', height='27').place(x=45, y=120) # blue background in middle of window
    Label(screen, text="Please enter details below to login", bg='#174873', fg='white').pack()
    Label(screen, text="", bg='#174873').pack() # for leaving a space in between
    Label(screen, text="Username * ", font=("Open Sans", 10, 'bold'), bg='#174873', fg='white').pack()
    Entry(screen, textvar=username_verify).pack()
    Label(screen, text="", bg='#174873').pack() # for leaving a space in between
    Label(screen, text="Password * ", font=("Open Sans", 10, 'bold'), bg='#174873', fg='white').pack()
    
    loginpw_ent = Entry(screen, textvar=password_verify, show="*")
    loginpw_ent.pack()
    loginpw_ent.bind("<Return>", lambda event: login_verify()) 
    
    
    Label(screen, text="", bg='#174873').pack() # for leaving a space in between
    
    btnlogin = Button(screen, text="LOGIN", bg="#e79700", width=15, height=1, font=("Open Sans", 13, 'bold'), fg='white', command=game_option)
    btnlogin.config(state = DISABLED)
    btnlogin.pack()

    Label(screen, text="", bg='#174873').pack() # for leaving a space in between
    Button(screen, text="New User? Register Here", height="2", width="30", bg='#e79700', font=("Open Sans", 10, 'bold'), fg='white', command=register_user).pack()
    screen.mainloop()

main_screen()      


####################################################################################################################################

GAME 1 CODE : MEMORY GAME


import pygame
import random
from itertools import product
from pygame.locals import *
from pygame.color import Color
from sys import exit

# the constants
FPS = 30
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 400
SQUARE_SIZE = 50
SQUARE_GAP = 10
BOARD_WIDTH = 8
BOARD_HEIGHT = 4
X_MARGIN = (SCREEN_WIDTH - (BOARD_WIDTH * (SQUARE_SIZE + SQUARE_GAP))) // 2
Y_MARGIN = (SCREEN_HEIGHT - (BOARD_HEIGHT * (SQUARE_SIZE + SQUARE_GAP))) // 2

# the board size must be even due to pairs
assert (BOARD_HEIGHT * BOARD_WIDTH) % 2 == 0, 'The board size must be even'

# the shapes
DIAMOND = 'diamond'
SQUARE = 'square'
TRIANGLE = 'triangle'
CIRCLE = 'circle'

BGCOLOR = Color('blue')

# the main function
def main():
    global screen, clock

    pygame.init()

    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption('Memory game')

    clock = pygame.time.Clock()

    shape = (DIAMOND, SQUARE, TRIANGLE, CIRCLE)
    colors = (Color('cyan'), Color('magenta'), Color('gray'), Color('chocolate'))

    # There should be enough symbols
    assert len(shape) * len(colors) >= BOARD_HEIGHT * BOARD_WIDTH // 2, 'There are not sufficient icons'

    board = get_random_board(shape, colors)
    revealed = [[False] * BOARD_WIDTH for i in range(BOARD_HEIGHT)]  # keeps track of visibility of square

    mouse_x = None
    mouse_y = None
    mouse_clicked = False
    first_selection = None

    running = True
    start_game_animation(board)

    while running:
        screen.fill(BGCOLOR)
        draw_board(board, revealed)

        for event in pygame.event.get():
            if event.type == QUIT:
                running = False
            elif event.type == MOUSEMOTION:
                mouse_x, mouse_y = pygame.mouse.get_pos()
            elif event.type == MOUSEBUTTONDOWN:
                mouse_x, mouse_y = pygame.mouse.get_pos()
                mouse_clicked = True

        x, y = get_pos(mouse_x, mouse_y)

        if x is not None and y is not None:
            if not revealed[x][y]:
                if mouse_clicked:
                    revealed[x][y] = True
                    draw_square(board, revealed, x, y)

                    if first_selection is None:
                        first_selection = (x, y)
                    else:
                        pygame.time.wait(1000)
                        if board[x][y] != board[first_selection[0]][first_selection[1]]:
                            revealed[x][y] = False
                            revealed[first_selection[0]][first_selection[1]] = False
                        first_selection = None

                    if game_won(revealed):

                        game_won_animation(board, revealed)

                        board = get_random_board(shape, colors)
                        revealed = [[False] * BOARD_WIDTH for i in range(BOARD_HEIGHT)]
                        start_game_animation(board)

                else:
                    draw_select_box(x, y)

        mouse_clicked = False
        pygame.display.update()
        
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    


def game_won(revealed):
    """ Returns whether all squares are found"""

    return all(all(x) for x in revealed)


def game_won_animation(board, revealed):
    """ Flashes background colors when the game is won"""

    color1 = Color('cyan')
    color2 = BGCOLOR
    for i in range(10):
        color1, color2 = color2, color1
        screen.fill(color1)
        draw_board(board, revealed)
        pygame.display.update()
        pygame.time.wait(300)


def start_game_animation(board):
    """Starts game by randomly showing 5 squares"""

    coordinates = list(product(range(BOARD_HEIGHT), range(BOARD_WIDTH)))
    random.shuffle(coordinates)

    revealed = [[False] * BOARD_WIDTH for i in range(BOARD_HEIGHT)]

    screen.fill(BGCOLOR)
    draw_board(board, revealed)
    pygame.display.update()
    pygame.time.wait(500)

    for sz in range(0, BOARD_HEIGHT * BOARD_WIDTH, 5):
        l = coordinates[sz: sz + 5]
        for x in l:
            revealed[x[0]][x[1]] = True
            draw_square(board, revealed, *x)
        pygame.time.wait(500)
        for x in l:
            revealed[x[0]][x[1]] = False
            draw_square(board, revealed, *x)


def get_random_board(shape, colors):
    """ Generates the board by random shuffling"""

    icons = list(product(shape, colors))
    num_icons = BOARD_HEIGHT * BOARD_WIDTH // 2
    icons = icons[:num_icons] * 2

    random.shuffle(icons)
    board = [icons[i:i + BOARD_WIDTH]
             for i in range(0, BOARD_HEIGHT * BOARD_WIDTH, BOARD_WIDTH)]
    return board


def get_coord(x, y):
    """ Gets the coordinates of particular square.
        The squares are number height wise and then width wise.
        So the x and y are interchanged."""

    top = X_MARGIN + y * (SQUARE_SIZE + SQUARE_GAP)
    left = Y_MARGIN + x * (SQUARE_SIZE + SQUARE_GAP)
    return top, left


def draw_icon(icon, x, y):
    """Draws the icon of (x, y) square"""

    px, py = get_coord(x, y)
    if icon[0] == DIAMOND:
        pygame.draw.polygon(screen, icon[1],
                            ((px + SQUARE_SIZE // 2, py + 5), (px + SQUARE_SIZE - 5, py + SQUARE_SIZE // 2),
                             (px + SQUARE_SIZE // 2, py + SQUARE_SIZE - 5), (px + 5, py + SQUARE_SIZE // 2)))
    elif icon[0] == SQUARE:
        pygame.draw.rect(screen, icon[1],
                         (px + 5, py + 5, SQUARE_SIZE - 10, SQUARE_SIZE - 10))
    elif icon[0] == TRIANGLE:
        pygame.draw.polygon(screen, icon[1],
                            ((px + SQUARE_SIZE // 2, py + 5), (px + 5, py + SQUARE_SIZE - 5),
                             (px + SQUARE_SIZE - 5, py + SQUARE_SIZE - 5)))
    elif icon[0] == CIRCLE:
        pygame.draw.circle(screen, icon[1],
                           (px + SQUARE_SIZE // 2, py + SQUARE_SIZE // 2), SQUARE_SIZE // 2 - 5)


def get_pos(cx, cy):
    """Gets the square (x, y) position  from the cartesian coordinates.
       The squares are number height wise and then width wise.
       So the cx and cy are interchanged."""

    if cx < X_MARGIN or cy < Y_MARGIN:
        return None, None

    x = (cy - Y_MARGIN) // (SQUARE_SIZE + SQUARE_GAP)
    y = (cx - X_MARGIN) // (SQUARE_SIZE + SQUARE_GAP)

    if x >= BOARD_HEIGHT or y >= BOARD_WIDTH or (cx - X_MARGIN) % (SQUARE_SIZE + SQUARE_GAP) > SQUARE_SIZE or (cy - Y_MARGIN) % (SQUARE_SIZE + SQUARE_GAP) > SQUARE_SIZE:
        return None, None
    else:
        return x, y


def draw_square(board, revealed, x, y):
    """Draws a particular square"""

    coords = get_coord(x, y)
    square_rect = (*coords, SQUARE_SIZE, SQUARE_SIZE)
    pygame.draw.rect(screen, BGCOLOR, square_rect)
    if revealed[x][y]:
        draw_icon(board[x][y], x, y)
    else:
        pygame.draw.rect(screen, Color('gold'), square_rect)
    pygame.display.update(square_rect)


def draw_board(board, revealed):
    """Draws the entire board"""

    for x in range(BOARD_HEIGHT):
        for y in range(BOARD_WIDTH):
            draw_square(board, revealed, x, y)


def draw_select_box(x, y):
    """Draws the highlight box around the square"""

    px, py = get_coord(x, y)
    pygame.draw.rect(screen, Color('red'), (px - 5, py - 5, SQUARE_SIZE + 10, SQUARE_SIZE + 10), 5)


'''
def memory_game():
    if __name__ == '__main__':
        main()
'''




####################################################################################################


GAME 2 CODE : DINO RUN-GAME


import os
import sys
import pygame
import random
from pygame import *
import cv2
import numpy as np
import math
import pyautogui

pygame.init()

scr_size = (width,height) = (600,150)
FPS = 60
gravity = 0.6
black = (0,0,0)
white = (255,255,255)
background_col = (235,235,235)
high_score = 0
screen = pygame.display.set_mode(scr_size)
clock = pygame.time.Clock()
pygame.display.set_caption("Dino Run ")
jump_sound = pygame.mixer.Sound('sprites/jump.wav')
die_sound = pygame.mixer.Sound('sprites/die.wav')
checkPoint_sound = pygame.mixer.Sound('sprites/checkPoint.wav')

def load_image(
    name,
    sizex=-1,
    sizey=-1,
    colorkey=None,
    ):

    fullname = os.path.join('sprites', name)
    image = pygame.image.load(fullname)
    image = image.convert()
    if colorkey is not None:
        if colorkey is -1:
            colorkey = image.get_at((0, 0))
        image.set_colorkey(colorkey, RLEACCEL)

    if sizex != -1 or sizey != -1:
        image = pygame.transform.scale(image, (sizex, sizey))

    return (image, image.get_rect())

def load_sprite_sheet(
        sheetname,
        nx,
        ny,
        scalex = -1,
        scaley = -1,
        colorkey = None,
        ):
    fullname = os.path.join('sprites',sheetname)
    sheet = pygame.image.load(fullname)
    sheet = sheet.convert()
    sheet_rect = sheet.get_rect()
    sprites = []
    sizex = sheet_rect.width/nx
    sizey = sheet_rect.height/ny

    for i in range(0,ny):
        for j in range(0,nx):
            rect = pygame.Rect((j*sizex,i*sizey,sizex,sizey))
            image = pygame.Surface(rect.size)
            image = image.convert()
            image.blit(sheet,(0,0),rect)

            if colorkey is not None:
                if colorkey is -1:
                    colorkey = image.get_at((0,0))
                image.set_colorkey(colorkey,RLEACCEL)

            if scalex != -1 or scaley != -1:
                image = pygame.transform.scale(image,(scalex,scaley))

            sprites.append(image)

    sprite_rect = sprites[0].get_rect()
    return sprites,sprite_rect

def disp_gameOver_msg(retbutton_image,gameover_image):
    retbutton_rect = retbutton_image.get_rect()
    retbutton_rect.centerx = width / 2
    retbutton_rect.top = height*0.52

    gameover_rect = gameover_image.get_rect()
    gameover_rect.centerx = width / 2
    gameover_rect.centery = height*0.35

    screen.blit(retbutton_image, retbutton_rect)
    screen.blit(gameover_image, gameover_rect)

def extractDigits(number):
    if number > -1:
        digits = []
        i = 0
        while(number/10 != 0):
            digits.append(number%10)
            number = int(number/10)

        digits.append(number%10)
        for i in range(len(digits),5):
            digits.append(0)
        digits.reverse()
        return digits

class Dino():
    def __init__(self,sizex=-1,sizey=-1):
        self.images,self.rect = load_sprite_sheet('dino.png',5,1,sizex,sizey,-1)
        self.rect.bottom = int(0.98*height)
        self.rect.left = width/15
        self.image = self.images[0]
        self.index = 0
        self.counter = 0
        self.score = 0
        self.isJumping = False
        self.isDead = False
        self.isBlinking = False
        self.movement = [0,0]
        self.jumpSpeed = 11.5
        self.stand_pos_width = self.rect.width
    

    def draw(self):
        screen.blit(self.image,self.rect)

    def checkbounds(self):
        if self.rect.bottom > int(0.98*height):
            self.rect.bottom = int(0.98*height)
            self.isJumping = False

    def update(self):
        if self.isJumping:
            self.movement[1] = self.movement[1] + gravity

        if self.isJumping:
            self.index = 0
        elif self.isBlinking:
            if self.index == 0:
                if self.counter % 400 == 399:
                    self.index = (self.index + 1)%2
            else:
                if self.counter % 20 == 19:
                    self.index = (self.index + 1)%2

        else:
            if self.counter % 5 == 0:
                self.index = (self.index + 1)%2 + 2

        if self.isDead:
           self.index = 4

        if not self.isJumping:
            self.image = self.images[self.index]
            self.rect.width = self.stand_pos_width
        
        self.rect = self.rect.move(self.movement)
        self.checkbounds()

        if not self.isDead and self.counter % 7 == 6 and self.isBlinking == False:
            self.score += 1
            if self.score % 100 == 0 and self.score != 0:
                if pygame.mixer.get_init() != None:
                    checkPoint_sound.play()

        self.counter = (self.counter + 1)

class Cactus(pygame.sprite.Sprite):
    def __init__(self,speed=5,sizex=-1,sizey=-1):
        pygame.sprite.Sprite.__init__(self,self.containers)
        self.images,self.rect = load_sprite_sheet('cacti-small.png',3,1,sizex,sizey,-1)
        self.rect.bottom = int(0.98*height)
        self.rect.left = width + self.rect.width
        self.image = self.images[random.randrange(0,3)]
        self.movement = [-1*speed,0]

    def draw(self):
        screen.blit(self.image,self.rect)

    def update(self):
        self.rect = self.rect.move(self.movement)

        if self.rect.right < 0:
            self.kill()




class Ground():
    def __init__(self,speed=-5):
        self.image,self.rect = load_image('ground.png',-1,-1,-1)
        self.image1,self.rect1 = load_image('ground.png',-1,-1,-1)
        self.rect.bottom = height
        self.rect1.bottom = height
        self.rect1.left = self.rect.right
        self.speed = speed

    def draw(self):
        screen.blit(self.image,self.rect)
        screen.blit(self.image1,self.rect1)

    def update(self):
        self.rect.left += self.speed
        self.rect1.left += self.speed

        if self.rect.right < 0:
            self.rect.left = self.rect1.right

        if self.rect1.right < 0:
            self.rect1.left = self.rect.right

class Cloud(pygame.sprite.Sprite):
    def __init__(self,x,y):
        pygame.sprite.Sprite.__init__(self,self.containers)
        self.image,self.rect = load_image('cloud.png',int(90*30/42),30,-1)
        self.speed = 1
        self.rect.left = x
        self.rect.top = y
        self.movement = [-1*self.speed,0]

    def draw(self):
        screen.blit(self.image,self.rect)

    def update(self):
        self.rect = self.rect.move(self.movement)
        if self.rect.right < 0:
            self.kill()

class Scoreboard():
    def __init__(self,x=-1,y=-1):
        self.score = 0
        self.tempimages,self.temprect = load_sprite_sheet('numbers.png',12,1,11,int(11*6/5),-1)
        self.image = pygame.Surface((55,int(11*6/5)))
        self.rect = self.image.get_rect()
        if x == -1:
            self.rect.left = width*0.89
        else:
            self.rect.left = x
        if y == -1:
            self.rect.top = height*0.1
        else:
            self.rect.top = y

    def draw(self):
        screen.blit(self.image,self.rect)

    def update(self,score):
        score_digits = extractDigits(score)
        self.image.fill(background_col)
        for s in score_digits:
            self.image.blit(self.tempimages[s],self.temprect)
            self.temprect.left += self.temprect.width
        self.temprect.left = 0


def introscreen():
    temp_dino = Dino(44,47)
    temp_dino.isBlinking = True
    gameStart = False

    temp_ground,temp_ground_rect = load_sprite_sheet('ground.png',15,1,-1,-1,-1)
    temp_ground_rect.left = width/20
    temp_ground_rect.bottom = height


    

    while not gameStart:
        if pygame.display.get_surface() == None:
            print("Couldn't load display surface")
            return True
        else:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    return True
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_SPACE or event.key == pygame.K_UP:
                        temp_dino.isJumping = True
                        temp_dino.isBlinking = False
                        temp_dino.movement[1] = -1*temp_dino.jumpSpeed

        temp_dino.update()

        if pygame.display.get_surface() != None:
            screen.fill(background_col)
            screen.blit(temp_ground[0],temp_ground_rect)
            
            temp_dino.draw()

            pygame.display.update()

        clock.tick(FPS)
        if temp_dino.isJumping == False and temp_dino.isBlinking == False:
            gameStart = True

def gameplay():
    global high_score
    gamespeed = 7
    startMenu = False
    gameOver = False
    gameQuit = False
    playerDino = Dino(44,47)
    new_ground = Ground(-1*gamespeed)
    scb = Scoreboard()
    highsc = Scoreboard(width*0.78)
    counter = 0

    cacti = pygame.sprite.Group()
    
    clouds = pygame.sprite.Group()
    last_obstacle = pygame.sprite.Group()

    Cactus.containers = cacti
    
    Cloud.containers = clouds

    retbutton_image,retbutton_rect = load_image('replay_button.png',35,31,-1)
    gameover_image,gameover_rect = load_image('game_over.png',190,11,-1)

    temp_images,temp_rect = load_sprite_sheet('numbers.png',12,1,11,int(11*6/5),-1)
    HI_image = pygame.Surface((22,int(11*6/5)))
    HI_rect = HI_image.get_rect()
    HI_image.fill(background_col)
    HI_image.blit(temp_images[10],temp_rect)
    temp_rect.left += temp_rect.width
    HI_image.blit(temp_images[11],temp_rect)
    HI_rect.top = height*0.1
    HI_rect.left = width*0.73
    cap = cv2.VideoCapture(0)

    while not gameQuit:
        while startMenu:
            pass
        while not gameOver:
            if pygame.display.get_surface() == None:
                print("Couldn't load display surface")
                gameQuit = True
                gameOver = True
            else:

                for c in cacti:
                    c.movement[0] = -1*gamespeed
                    if pygame.sprite.collide_mask(playerDino,c):
                        playerDino.isDead = True
                        
                        if pygame.mixer.get_init() != None:
                            die_sound.play()


                if len(cacti) < 2:
                    if len(cacti) == 0:
                        last_obstacle.empty()
                        last_obstacle.add(Cactus(gamespeed,40,40))
                    else:
                        for l in last_obstacle:
                            if l.rect.right < width*0.7 and random.randrange(0,50) == 10:
                                last_obstacle.empty()
                                last_obstacle.add(Cactus(gamespeed, 40, 40))

                

                if len(clouds) < 5 and random.randrange(0,300) == 10:
                    Cloud(width,random.randrange(height/5,height/2))

                playerDino.update()
                cacti.update()
                clouds.update()
                new_ground.update()
                scb.update(playerDino.score)
                highsc.update(high_score)
    
                for c in cacti:
                     try:

                        ret, frame = cap.read()
                        frame = cv2.flip(frame, 1)
                        kernel = np.ones((3, 3), np.uint8)

                        # defining region of interest
                        roi = frame[100:300, 100:300]

                        # Making a rectangle around the region of interest
                        cv2.rectangle(frame, (100, 100), (300, 300), (0, 255, 0), 0)
                        hsv = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)

                        # defining skin range for HSV
                        lower_skin = np.array([0, 20, 70], dtype=np.uint8)
                        upper_skin = np.array([20, 255, 255], dtype=np.uint8)

                        # Green glove skin : Doesn't work
                        #lower_skin = np.array([66, 75, 82], dtype=np.uint8)
                        #upper_skin = np.array([96, 75, 82], dtype=np.uint8)

                        # extracting skin color image
                        mask = cv2.inRange(hsv, lower_skin, upper_skin)

                        # Dilating
                        mask = cv2.dilate(mask, kernel, iterations=4)

                        # blurring the image
                        mask = cv2.GaussianBlur(mask, (5, 5), 100)

                        # find contours
                        contours, hierarchy = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

                        # find contour of max area(hand)
                        cnt = max(contours, key=lambda x: cv2.contourArea(x))

                        # approx the contour a little
                        epsilon = 0.0005 * cv2.arcLength(cnt, True)
                        approx = cv2.approxPolyDP(cnt, epsilon, True)

                        # making convex hull
                        hull = cv2.convexHull(cnt)

                        # define area of hull and area of hand
                        areahull = cv2.contourArea(hull)
                        areacnt = cv2.contourArea(cnt)

                        # find the percentage of area not covered by hand in convex hull
                        arearatio = ((areahull - areacnt) / areacnt) * 100

                        # find the defects in convex hull with respect to hand
                        hull = cv2.convexHull(approx, returnPoints=False)
                        defects = cv2.convexityDefects(approx, hull)

                        # l = no. of defects
                        l = 0

                        # code for finding no. of defects due to fingers
                        for i in range(defects.shape[0]):
                            s, e, f, d = defects[i, 0]
                            start = tuple(approx[s][0])
                            end = tuple(approx[e][0])
                            far = tuple(approx[f][0])
                            pt = (100, 180)

                            # find length of all sides of triangle
                            a = math.sqrt((end[0] - start[0]) ** 2 + (end[1] - start[1]) ** 2)
                            b = math.sqrt((far[0] - start[0]) ** 2 + (far[1] - start[1]) ** 2)
                            c = math.sqrt((end[0] - far[0]) ** 2 + (end[1] - far[1]) ** 2)
                            s = (a + b + c) / 2
                            ar = math.sqrt(s * (s - a) * (s - b) * (s - c))

                            # distance between point and convex hull
                            d = (2 * ar) / a

                            # apply cosine rule here
                            angle = math.acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c)) * 57

                            # ignore angles > 90 and ignore points very close to convex hull(they generally come due to noise)
                            if angle <= 90 and d > 30:
                                l += 1
                                cv2.circle(roi, far, 3, [255, 0, 0], -1)

                            # draw lines around hand
                            cv2.line(roi, start, end, [0, 255, 0], 2)

                        l += 1

                        # print corresponding gestures which are in their ranges
                        font = cv2.FONT_HERSHEY_SIMPLEX
                        if l == 1:
                            if areacnt < 2000:
                                cv2.putText(frame, 'Put hand in the box', (0, 50), font, 2, (0, 0, 255), 3, cv2.LINE_AA)
                            else:
                                if arearatio < 12:
                                    cv2.putText(frame, 'Running', (0, 50), font, 2, (0, 0, 255), 3, cv2.LINE_AA)
                                    #pyautogui.keyDown('down')


                        elif l > 1:
                            cv2.putText(frame, 'Jump', (0, 50), font, 2, (0, 0, 255), 3, cv2.LINE_AA)
                            if playerDino.rect.bottom == int(0.98*height):
                                playerDino.isJumping = True
                                if pygame.mixer.get_init() != None:
                                    jump_sound.play()
                                playerDino.movement[1] = -1*playerDino.jumpSpeed



                        # show the windows
                        cv2.imshow('mask', mask)
                        cv2.imshow('frame', frame)
                     except:
                         pass

                     k = cv2.waitKey(5) & 0xFF
                     if k == 27:
                          break





               

            if pygame.display.get_surface() != None:
                screen.fill(background_col)
                new_ground.draw()
                clouds.draw(screen)
                scb.draw()
                if high_score != 0:
                    highsc.draw()
                    screen.blit(HI_image,HI_rect)
                cacti.draw(screen)
                
                playerDino.draw()

                pygame.display.update()
            clock.tick(FPS)

            if playerDino.isDead:
                gameOver = True
                cv2.destroyAllWindows()
                if playerDino.score > high_score:
                    high_score = playerDino.score

            if counter%700 == 699:
                new_ground.speed -= 1
                gamespeed += 1

            counter = (counter + 1)
               

            if gameQuit:
                break

        while gameOver:
            if pygame.display.get_surface() == None:
                print("Couldn't load display surface")
                gameQuit = True
                gameOver = False
            else:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        gameQuit = True
                        gameOver = False
                        
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_ESCAPE:
                            gameQuit = True
                            gameOver = False

                        if event.key == pygame.K_RETURN or event.key == pygame.K_SPACE:
                            gameOver = False
                            gameplay()
            highsc.update(high_score)
            if pygame.display.get_surface() != None:
                disp_gameOver_msg(retbutton_image,gameover_image)
                if high_score != 0:
                    highsc.draw()
                    screen.blit(HI_image,HI_rect)
                pygame.display.update()
            clock.tick(FPS)

        pygame.quit()
        quit()

def main():
    isGameQuit = introscreen()
    if not isGameQuit:
        gameplay()

main()




